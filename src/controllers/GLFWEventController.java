package controllers;

import main.EngineTester;
import org.lwjgl.glfw.*;

import static org.lwjgl.glfw.GLFW.*;

public class GLFWEventController {

    private static GLFWKeyCallback keyCallback;
    private static GLFWScrollCallback scrollCallback;
    private static GLFWMouseButtonCallback mouseButtonCallback;
    private static GLFWCursorPosCallback cursorPosCallback;
    private static GLFWWindowFocusCallback windowFocusCallback;
    private static GLFWCharCallback charCallback;
    private static GLFWFramebufferSizeCallback framebufferSizeCallback;

//    private static ApplicationController controller;

    /**
     * Creates callbacks for each window event which is used
     * @param window the GLFW window which can create events
     * @param controller the ApplicationController which will process the events
     */
    public static void init(long window, ApplicationController controller){
        //**********************************Set GLFW event callbacks*************************************
        //Processes events related to raw keyboard input. Does not respect keyboard layout
        glfwSetKeyCallback(window, keyCallback = new GLFWKeyCallback() {
            @Override
            public void invoke(long window, int key, int scancode, int action, int mods) {
                controller.pressKey(key, action);
            }
        });

        //Processes events related to OS processed typed input. Respects keyboard layout and characters created by multiple key presses,
        //Only the final character which would appear in a text document is processed. Tabs and newline characters are not considered
        glfwSetCharCallback(window, charCallback = new GLFWCharCallback() {
            @Override
            public void invoke(long window, int codepoint) {
                controller.type(codepoint);
            }
        });

        //Processes events related to scrolling, supports two dimensional scroll wheels, does not track position
        glfwSetScrollCallback(window, scrollCallback = new GLFWScrollCallback() {
            @Override
            public void invoke(long window, double xoffset, double yoffset) {
                controller.scroll(yoffset);
            }
        });

        //Processes events related to clicking any of the mouse buttons
        glfwSetMouseButtonCallback(window, mouseButtonCallback = new GLFWMouseButtonCallback() {
            @Override
            public void invoke(long window, int button, int action, int mods) {
                controller.click(window, button, action);
            }
        });

        //Processes events related to moving the mouse, xpos and ypos are the position in pixels in the window from the top left to the bottom right
        glfwSetCursorPosCallback(window, cursorPosCallback = new GLFWCursorPosCallback() {
            @Override
            public void invoke(long window, double xpos, double ypos) {
                controller.moveMouse(window, xpos, ypos);
            }
        });

        //Processes changes to the size of the window, either generated by function or by user interaction
        glfwSetFramebufferSizeCallback(window, framebufferSizeCallback = new GLFWFramebufferSizeCallback() {
            @Override
            public void invoke(long window, int width, int height) {
                //In windows if width or height are set to zero certain elements will be unable to be reset
                if (width > 0 && height > 0) {
                    controller.setFrameBufferSize(width, height);
                }
            }
        });
    }



}
